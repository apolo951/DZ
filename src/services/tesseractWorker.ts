/**
 * Service worker Tesseract.js simplifi√© pour √©viter les requ√™tes externes
 * Version locale sans d√©pendances CDN
 */

import { logger } from '@/utils/logger';

export interface SimpleTesseractResult {
  data: {
    text: string;
    confidence: number;
    words: Array<{
      text: string;
      confidence: number;
      bbox: { x0: number; y0: number; x1: number; y1: number };
    }>;
  };
}

class TesseractWorkerService {
  private isInitialized = false;

  /**
   * Compatibilit√© avec l'ancien code
   */
  async getStatus() {
    return { status: this.isInitialized ? 'ready' : 'initializing' };
  }

  constructor() {
    logger.info('OCR', 'üîß Service Tesseract local initialis√© (mode hors ligne)');
  }

  /**
   * Utilise Tesseract.js R√âEL - AUCUNE simulation avec fallback robuste
   */
  async getTesseractWorker(): Promise<any> {
    if (!this.isInitialized) {
      await this.performInitialization();
    }

    // Import dynamique de Tesseract.js
    const { createWorker } = await import('tesseract.js');
    
    try {
      // CRITIQUE: Configuration optimis√©e pour extraction arabe alg√©rienne
      const worker = await createWorker(['ara'], 1, {
        logger: (m: any) => logger.info('OCR', 'üîç [TESSERACT-ARABE-ALG√âRIEN]', m),
        errorHandler: (err: any) => {
          logger.warn('OCR', '‚ö†Ô∏è Tesseract warning (non-fatal):', err);
        },
        cacheMethod: 'none' // D√©sactive le cache pour √©viter les conflicts
      });

      // Configuration OCR CRITIQUE pour extraction arabe optimis√©e
      const { getAlgerianArabicWhitelist, ARABIC_OCR_PARAMETERS } = await import('@/config/arabicCharacterSets');
      
      // Configuration SP√âCIFIQUE pour am√©liorer l'extraction arabe
      await worker.setParameters({
        // CRITIQUE: PSM Mode 6 optimal pour blocs de texte arabe
        tessedit_pageseg_mode: '6' as any, // Bloc uniforme - meilleur pour arabe dense
        
        // CRITIQUE: OCR Engine 2 LSTM uniquement pour arabe moderne
        tessedit_ocr_engine_mode: '2' as any, // LSTM seul - optimal pour arabe alg√©rien
        
        // Param√®tres CRITIQUES pour RTL et arabe
        preserve_interword_spaces: '1',
        textord_arabic_numerals: '1',
        textord_noise_sizefraction: '5.0', // R√©duit la sensibilit√© au bruit
        textord_noise_translimit: '3.0',   // Am√©liore la d√©tection des caract√®res
        textord_noise_normratio: '1.5',    // Normalise les variations de taille
        
        // D√âSACTIVE dictionnaires pour √©viter interf√©rences
        load_system_dawg: '0',
        load_freq_dawg: '0', 
        load_unambig_dawg: '0',
        load_punc_dawg: '0',
        load_number_dawg: '0',
        
        // Configuration avanc√©e pour liaison arabe
        chop_enable: '1',                    // Active s√©paration caract√®res li√©s
        wordrec_num_seg_states: '50',        // Plus d'√©tats pour arabe complexe
        segment_penalty_dict_frequent_word: '0', // Pas de p√©nalit√© dictionnaire
        
        // Optimisation espaces arabes RTL
        tosp_enough_space_samples_for_median: '1', // Minimum d'√©chantillons
        tosp_old_to_method: '0',                   // Nouvelle m√©thode espaces
        tosp_debug_level: '0',                     // Pas de debug
        
        // Am√©lioration d√©tection caract√®res arabes sp√©cifiques  
        classify_min_certainty_margin: '3.0',     // Marge de certitude r√©duite
        classify_certainty_scale: '15.0',         // √âchelle adapt√©e √† l'arabe
        matcher_avg_noise_size: '8.0',           // Taille bruit adapt√©e
        
        // Param√®tres de reconnaissance avanc√©s pour arabe
        language_model_penalty_non_freq_dict_word: '0.05',
        language_model_penalty_non_dict_word: '0.1',
        textord_min_linesize: '1.8',
        textord_heavy_nr: '1'
      });

      return {
        recognize: async (file: File | Blob): Promise<SimpleTesseractResult> => {
          logger.info('OCR', 'üìñ Traitement OCR R√âEL', { 
            fileType: file instanceof File ? file.type : 'blob' 
          });

          try {
            const result = await worker.recognize(file);
            return {
              data: {
                text: result.data.text || '',
                confidence: result.data.confidence || 0,
                words: (result.data as any).words || []
              }
            };
          } catch (error) {
            logger.error('OCR', 'Erreur extraction r√©elle', { error });
            throw new Error(`Extraction OCR √©chou√©e: ${error.message}`);
          }
        },
        setParameters: async (params: any) => {
          logger.info('OCR', '‚öôÔ∏è Configuration param√®tres OCR r√©els', params);
          return worker.setParameters(params);
        },
        terminate: async () => {
          logger.info('OCR', 'üîå Arr√™t worker Tesseract r√©el');
          return worker.terminate();
        }
      };
      
    } catch (error) {
      logger.error('OCR', 'Erreur cr√©ation worker Tesseract', { error });
      throw new Error(`Impossible d'initialiser Tesseract: ${error.message}`);
    }
  }

  private async performInitialization(): Promise<void> {
    logger.info('OCR', 'üöÄ Initialisation Tesseract R√âEL...');
    
    try {
      // Tesseract peut fonctionner sans fichiers locaux (utilise CDN par d√©faut)
      // On supprime la v√©rification stricte qui bloque l'utilisation
      logger.info('OCR', 'üìã Mode Tesseract standard avec langues par d√©faut');
      
      this.isInitialized = true;
      logger.info('OCR', '‚úÖ Tesseract R√âEL pr√™t');
      
    } catch (error) {
      logger.error('OCR', 'Erreur initialisation Tesseract', { error });
      throw error;
    }
  }

  async cleanup(): Promise<void> {
    logger.info('OCR', 'üßπ Nettoyage service Tesseract');
    this.isInitialized = false;
  }
}

export const tesseractWorkerService = new TesseractWorkerService();
export default tesseractWorkerService;